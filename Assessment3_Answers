//Shriya

#include<iostream>
#include<algorithm>
using namespace std;

void swap(char *x,char *y) 
{
char temp=*x;
*x=*y;
*y=temp;
}
void nextNum(char num[],int size)
int i,j;
for(i=size-1;i>0;i--)
{
if(num[i-1]<num[i])
break;
}

if(i==0) 
{
cout<<"No number greater than this is possible from the same set of digits";
return;
}
int x=num[i-1],smaller=i;
for(j=i+1;j<size;j++)
{
if(num[j]>x && num[j]<num[smaller]) 
smaller=j;
}
}
swap(&num[smaller],&num[i-1]); 
sort(num+i,num+size); 
for(int i=0;i<size;i++)
{
cout<<num[i];
}
return ;
}
int main()
{
int n;
cout<<"Enter the size of the number :";
cin>>n;
char number[n];
cout<<"Enter the number :";
for(int i=0;i<n;i++)
{
cin>>number[i];
}
nextNum(number,n);
return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------

//Shashipriya


#include <iostream>
using namespace std;

class Fruit
{
public:
  static int fruitCounter;
  Fruit()
  {
    fruitCounter++;
  }
  ~Fruit()
  {
    fruitCounter--;
  }
};

class Apples: public Fruit
{
public:
  static int applesCounter;
  Apples():Fruit()
  {
    applesCounter++;
  }
  ~Apples()
  {
    applesCounter--;
  }

};

class Mangoes: public Fruit
{
public:
  static int mangoesCounter;
  Mangoes():Fruit()
  {
    mangoesCounter++;
  }
  ~Mangoes()
  {
    mangoesCounter--;
  }
};

int Fruit::fruitCounter = 0;
int Apples::applesCounter = 0;
int Mangoes::mangoesCounter = 0;

int main()
{
  Apples firstApple,secondApple,thirdApple;
  Mangoes firstMango,secondMango,thirdMango,fourthMango;
  cout << "Total number of fruits: " << Fruit::fruitCounter << endl;
  cout << "Number of apples: " << Apples::applesCounter << endl;
  cout << "Number of mangoes: " << Mangoes::mangoesCounter << endl;
  return 0;
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Ipsita

#include<iostream>
using namespace std;
void test_try(int num)
{
        try
        {
                if(num>=0 && num<=9)
                        throw num;
                else
                        cout<<"\n It is not a Single Number ";
                throw;
        }
        catch(int a)
        {
                cout<<"\n It is a Single Number";
        }
        catch(char b[100])
        {
                cout<<b;
        }
}
int main()
{
        int num;
        cout<<"\n Enter Number : ";
        cin>>num;
        test_try(num);
        return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Naveen

#include<iostream>
#include<string>
using namespace std;

int main()
{
     float num1, num2, ans;
     char Operator;
     
     cout<<"\n Perform Arithmetic Operations on Two Numbers";
     cout<<"\n --------------------------------------------";

     try
     {
          cout<<"\n Enter First Number   :  ";
          cin>>num1;
          if(num1==0)
               throw 0;
          cout<<"\n Enter Operator       :  ";
          cin>>Operator;
          if(Operator != '+' && Operator != '-' &&
               Operator != '*' && Operator != '/')
          throw Operator;
          cout<<"\n Enter Second Number  :  ";
          cin>>num2;
          cout<<"\n --------------------------------------------";
          switch(Operator)
          {
               case '+':
                    ans = num1 + num2;
                    break;
               case '-':
                    ans = num1 - num2;
                    break;
               case '*':
                    ans = num1 * num2;
                    break;
               case '/':
                    ans = num1 / num2;
                    break;
          }
          if(num2 == 0) 
               throw 0;
          cout<<"---------------------------------------------------------"<<endl;
          cout<<" Answer : "<<num1<<" "<<Operator<<" "<<num2<<" = "<<ans;
     }
     catch(const char c)
     {
          cout<<"-----------------------------------------"<<endl;
          cout<<"Error: " <<c<<" is not a valid Operator";
     }
     catch(const int n)
     {
         if(num1==0){
         cout<<"-------------------------------------"<<endl;
         cout<<"Error: Bad operation"<<endl;
         }
         else
         cout<<"-------------------------------------"<<endl;
         cout<<"Error : Divide by zero error";
     }
     return 0;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Kedar

#include<iostream>
using namespace std;
void test_try(int num)
{
        try
        {
                if(num>=0 && num<=9)
                        throw num;
                else
                        cout<<"\n It is not a Single Number ";
                throw;
        }
        catch(int a)
        {
                cout<<"\n It is a Single Number";
        }
        catch(char b[100])
        {
                cout<<b;
        }
}
int main()
{
        int num;
        cout<<"\n Enter Number : ";
        cin>>num;
        test_try(num);
        return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Nishanth

#include <iostream>
#include <memory>

using namespace std;

class Rectangle
{
  public:
        int width,height;
        double area;
     
  public:
  
    void display()
    {
        cout<<"\nEnter the width: ";
        cin>>width;
        cout<<"\nEnter the heigth: ";
        cin>>height;
        area=width*height;
        cout<<"\nArea of Rectangle is: "<<area<<endl;  
    }
  
};

int main()
{
    unique_ptr<Rectangle> r {new Rectangle{100}};
    r->display();
    return 0;
}
